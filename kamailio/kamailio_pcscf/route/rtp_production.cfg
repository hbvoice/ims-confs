# RTPProxy control
route[ENC_SRTP] {
	add_rr_param(";rm=1");
#!ifdef WITH_SRTP
	$avp(rtpproxy_offer_flags) = "replace-origin replace-session-connection ICE=force SRTP AVP";
#!else
	$avp(rtpproxy_offer_flags) = "replace-origin replace-session-connection ICE=force RTP AVP";
#!endif
	$avp(rtpproxy_answer_flags) = "replace-origin replace-session-connection ICE=remove RTP AVP";
}

route[DEC_SRTP] {
	add_rr_param(";rm=2");
	$avp(rtpproxy_offer_flags) = "replace-origin replace-session-connection ICE=remove RTP AVP";
#!ifdef WITH_SRTP
	$avp(rtpproxy_answer_flags) = "replace-origin replace-session-connection ICE=force SRTP AVP";
#!else
	$avp(rtpproxy_answer_flags) = "replace-origin replace-session-connection ICE=force RTP AVP";
#!endif
}

route[ENC_WS_RTP] {
	add_rr_param(";rm=3");
	$avp(rtpproxy_offer_flags) = "replace-origin replace-session-connection ICE=force RTP AVPF";
	$avp(rtpproxy_answer_flags) = "replace-origin replace-session-connection ICE=remove RTP AVP";
}

route[DEC_WS_RTP] {
	add_rr_param(";rm=4");
	$avp(rtpproxy_offer_flags) = "replace-origin replace-session-connection ICE=remove RTP AVP";
	$avp(rtpproxy_answer_flags) = "replace-origin replace-session-connection ICE=force RTP AVPF";
}

route[ENC_WSS_RTP] {
	add_rr_param(";rm=5");
	$avp(rtpproxy_offer_flags) = "replace-origin replace-session-connection ICE=force SRTP AVPF DTLS=passive";
	$avp(rtpproxy_answer_flags) = "replace-origin replace-session-connection ICE=remove RTP AVP";
}

route[DEC_WSS_RTP] {
	add_rr_param(";rm=6");
	$avp(rtpproxy_offer_flags) = "replace-origin replace-session-connection ICE=remove RTP AVP";
	$avp(rtpproxy_answer_flags) = "replace-origin replace-session-connection ICE=force SRTP AVPF DTLS=passive";
}

route[ENC_RTP] {
	add_rr_param(";rm=7");
	$avp(rtpproxy_offer_flags) = "replace-origin replace-session-connection ICE=force RTP AVP";
	$avp(rtpproxy_answer_flags) = "replace-origin replace-session-connection ICE=remove RTP AVP";
}

route[DEC_RTP] {
	add_rr_param(";rm=8");
	$avp(rtpproxy_offer_flags) = "replace-origin replace-session-connection ICE=remove RTP AVP";
	$avp(rtpproxy_answer_flags) = "replace-origin replace-session-connection ICE=force RTP AVP";
}

# RTPProxy control
route[NATMANAGE] {
##!ifdef WITH_DEBUG
	if (is_request())
		xlog("REQUEST: $rm $ru ($si:$sp, $ci)\n");
	else
		xlog("REPLY: $rs $rr ($rm, $si:$sp, $ci)\n");

	if (is_direction("downstream"))
		xlog("    downstream\n");
	else
		xlog("    upstream\n");

	xlog("    Offer: $avp(rtpproxy_offer_flags)\n");
	xlog("    Answer: $avp(rtpproxy_answer_flags)\n");

	if (isflagset(FLT_MOBILE_ORIG)) {
		xlog("    mo\n");
	} else {
		xlog("    mt\n");
	}
##!endif
	if ((is_reply() && ($T_req($tt) != $null)) || (is_request() && has_totag())) {
		xlog("Request had ToTag.");
		#if((is_request() && !check_route_param("rm=")) || (is_reply() && !isflagset(FLT_RTP))) {
		if(!check_route_param("rm=") && !isflagset(FLT_RTP)) {
			xlog("L_DBG", "No RM Param\n");
			return;
		}
		if (is_request()) {
			if (isflagset(FLT_MOBILE_ORIG) && is_direction("downstream")) {
				xlog("L_DBG", "1) add_contact_alias();");
				add_contact_alias();
			} else if (!isflagset(FLT_MOBILE_ORIG) && is_direction("upstream")) {
				xlog("L_DBG", "2) add_contact_alias();");
				add_contact_alias();
			}
		} else {
			if (!isflagset(FLT_MOBILE_ORIG) && is_direction("downstream")) {
				xlog("L_DBG", "1) ADD_contact_alias();");
				add_contact_alias();
			} else if (isflagset(FLT_MOBILE_ORIG) && is_direction("downstream")) {
				xlog("L_DBG", "2) ADD_contact_alias();");
				add_contact_alias();
			}
		}
	} else {
		if (is_reply() && !isflagset(FLT_MOBILE_ORIG)) {
			xlog("L_DBG", "3) ADD_contact_alias();");
			add_contact_alias();
		}
	}

	if (isflagset(FLT_MOBILE_ORIG)) {
		$avp(setid) = 1;
		$avp(extra_id) = "mo";
	} else {
		$avp(setid) = 2;
		$avp(extra_id) = "mt";
	}
	xlog("Set: $avp(setid), Extra-ID $avp(extra_id)\n");

	if(!t_is_set("onreply_route")) t_on_reply("NAT_REPLY");
	if(!t_is_set("failure_route")) t_on_failure("NAT_FAILURE");

	if (is_method("BYE") || t_is_failure_route()) {
		rtpengine_manage();

		if (is_method("BYE")) {
			if ($avp(mos_average_samples) > 0) {
				$var(mos) = $(avp(mos_average){s.numeric});
				if ($var(mos) < 10) {
					$var(mos) = $var(mos) * 10;
				}
				xlog("L_DBG", "QOS Average Calculation, based on $avp(mos_average_samples) samples\n");
				xlog("L_DBG", "-------------------------------------\n");
				xlog("L_DBG", "MOS was $avp(mos_average) ($var(mos))\n");
				xlog("L_DBG", "Packetloss was $avp(mos_average_packetloss)\n");
				xlog("L_DBG", "Jitter was $avp(mos_average_jitter)\n");
				xlog("L_DBG", "Roundtrip was $avp(mos_average_roundtrip)\n");
				update_stat("qos_total", "+1");
				update_stat("qos_mos", "$var(mos)");
				update_stat("qos_packetloss", "$avp(mos_average_packetloss)");
				update_stat("qos_jitter", "$avp(mos_average_jitter)");
				update_stat("qos_rountrip", "$avp(mos_average_roundtrip)");

			}
		}

		return;
	}

	setflag(FLT_RTP);

	if (!(has_body("application/sdp") || get_body_part("application/sdp", "$var(foo)")))
		return;

	if (sdp_with_active_media("message"))
		return;

#!ifndef FORCE_RTPRELAY
	if (!isflagset(FLT_NAT) || !check_route_param("rm="))
		return;
#!endif
	if ((is_reply() && ($T_req($tt) != $null)) || (is_request() && has_totag())) {
		rtpengine_manage();
	} else {
		if ($avp(rtpproxy_offer_flags) == $null)
			return;
		if ($avp(rtpproxy_answer_flags) == $null)
			return;

		if (isflagset(FLT_MOBILE_ORIG)) {
			$avp(rtpproxy_offer_flags) = "direction=public direction=private "+$avp(rtpproxy_offer_flags);
			$avp(rtpproxy_answer_flags) = "direction=private direction=public "+$avp(rtpproxy_answer_flags);
		} else {
			$avp(rtpproxy_offer_flags) = "direction=private direction=public "+$avp(rtpproxy_offer_flags);
			$avp(rtpproxy_answer_flags) = "direction=public direction=private "+$avp(rtpproxy_answer_flags);
		}

		if (isflagset(FLT_X3)) {
			$avp(rtpproxy_answer_flags) = $avp(rtpproxy_answer_flags) + " record-call=on";
			if ($avp(x3meta) != $null) {
				$avp(rtpproxy_offer_flags) = $avp(rtpproxy_offer_flags) + " metadata="+$avp(x3meta);
				$avp(rtpproxy_answer_flags) = $avp(rtpproxy_answer_flags) + " metadata="+$avp(x3meta);
			}
		}

		if (is_request()) {
			rtpengine_manage($avp(rtpproxy_offer_flags));
		} else {
			rtpengine_manage($avp(rtpproxy_answer_flags));
		}
	}
}

# manage incoming replies
onreply_route[NAT_REPLY] {
	# In case of 1xx and 2xx do NAT
	if(status=~"[12][0-9][0-9]")
		route(NATMANAGE);
}


# manage incoming replies
failure_route[NAT_FAILURE] {
	route(NATMANAGE);
}
