#!ifdef WITH_MSRP
route[add_msrp_relay] {
	if (is_method("INVITE") && !sdp_with_active_media("message")) {
		if(sdp_get_line_startswith("$avp(msrppath)", "a=path")) {
			xlog("path: $avp(msrppath)\n");
			if (!($avp(msrppath) =~ "$Ri")) {
				$var(msrpuri) = $(avp(msrppath){s.substr,7,0});
				xlog("MSRP URI of client: $var(msrpuri)\n");
				$var(cnt) = $var(cnt) + 1;
				pv_printf("$var(sessid)", "s.$(pp).$(var(cnt)).$(RANDOM)");
				$sht(msrp=>$var(sessid)::srcaddr) = $(var(msrpuri){msrpuri.proto})+"//"+$(var(msrpuri){msrpuri.host})+":"+$(var(msrpuri){msrpuri.port})+"/"+$(var(msrpuri){msrpuri.session});
				// $sht(msrp=>$var(sessid)::srcaddr) = $var(msrpuri);
				xlog("MSRP URI of client: $sht(msrp=>$var(sessid)::srcaddr) / $var(msrpuri)\n");
				$sht(msrp=>$var(sessid)::srcsock) = "tcp://"+$Ri+":2855";
				$var(newpath) = "a=path:msrp://"+$Ri+":2855/"+$var(sessid)+ ";tcp "+$(avp(msrppath){s.substr,7,0});
				xlog("New path set to $var(newpath)\n");
				replace_body("$avp(msrppath)", "$avp(msrppath)");
			} else {
				xlog("Found $Ri in $avp(msrppath), not adding path...\n");
			}
		}
	}
}

event_route[msrp:frame-in] {
	xlog("============#[[$msrp(method)]]===========\n");
	xlog("============*[[$si:$sp]]\n");
	xlog("============ crthop:   [$msrp(crthop)]\n");
	xlog("============ prevhop:  [$msrp(prevhop)]\n");
	xlog("============ nexthop:  [$msrp(nexthop)]\n");
	xlog("============ firsthop: [$msrp(firsthop)]\n");
	xlog("============ lasthop:  [$msrp(lasthop)]\n");
	xlog("============ prevhops: [$msrp(prevhops)]\n");
	xlog("============ nexthops: [$msrp(nexthops)]\n");
	xlog("============ srcaddr:  [$msrp(srcaddr)]\n");
	xlog("============ srcsock:  [$msrp(srcsock)]\n");
	xlog("============ sessid:   [$msrp(sessid)]\n");

	msrp_reply_flags("1");

	if(msrp_is_reply()) {
		msrp_relay();
	} else if($msrp(method)=="AUTH") {
		if($msrp(nexthops)>0) {
			msrp_relay();
			exit;
		}

		# frame for local server - send Use-Path
		if ($sht(msrpauth=>$si) == $null) {
			msrp_reply("403", "Not registered");
		} else {
			xlog("$si authenticated due to previous SIP REGISTER\n");
		}


		if ($hdr(Expires) != $null) {
			$var(expires) = (int) $hdr(Expires);
			if ($var(expires) < MSRP_MIN_EXPIRES) {
				msrp_reply("423", "Interval Out-of-Bounds",
					"Min-Expires: MSRP_MIN_EXPIRES\r\n");
				exit;
			} else {
				msrp_reply("423", "Interval Out-of-Bounds",
					"Max-Expires: MSRP_MAX_EXPIRES\r\n");
				exit;
			}

		} else
			$var(expires) = MSRP_MAX_EXPIRES;
		
		$var(cnt) = $var(cnt) + 1;
		pv_printf("$var(sessid)", "s.$(pp).$(var(cnt)).$(RANDOM)");
		$sht(msrp=>$var(sessid)::srcaddr) = $msrp(srcaddr);
		$sht(msrp=>$var(sessid)::srcsock) = $msrp(srcsock);
		$shtex(msrp=>$var(sessid)) = $var(expires) + 5;
		# - Use-Path: the MSRP address for server + session id
		$var(headers) = "Use-Path: msrp://"+$Ri+":2855/"
				+ $var(sessid) + ";tcp\r\n"
				+ "Expires: " + $var(expires) + "\r\n";
		msrp_reply("200", "OK", "$var(headers)");
	} else if ($msrp(method)=="SEND" || $msrp(method)=="REPORT") {
		if ($msrp(nexthops) > 1) {
			if ($msrp(method) != "REPORT") {
				msrp_reply("200", "OK");
			}
			msrp_relay();
			exit;
		}
		$var(sessid) = $msrp(sessid);
		if($sht(msrp=>$var(sessid)::srcaddr) == $null) {
			# one more hop, but we don't have address in htable
			if ($msrp(method) != "REPORT") {
				msrp_reply("481", "Session-does-not-exist");
			}
			exit;
		} else if($msrp(method) != "REPORT") {
			msrp_reply("200", "OK");
		}
		msrp_relay_flags("1");
		msrp_set_dst("$sht(msrp=>$var(sessid)::srcaddr)", "$sht(msrp=>$var(sessid)::srcsock)");
		msrp_relay();
	} else {
		msrp_reply("501", "Request-method-not-understood");
	}
}
#!endif

