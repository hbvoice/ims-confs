######################################################################
# Terminating, Initial requests
######################################################################
route[MT] {
	t_newtran();
	xlog("L_INFO", "[$tU $fU $ci $rm] in Route MT \n");

#!ifdef WITH_X2
	route(LI);
#!endif

	route_if_exists("MT_CUSTOM");
	if (is_method("INVITE")) {
		# Provide some statistics
        	update_stat("mt_total", "+1");
		# Save time, for calculating CST
		if ($sht(a=>$ci::start_time) == $null || $sht(a=>$ci::start_time) == 0) {
		    $sht(a=>$ci::start_time) = $TV(Sn);
		}
	}

	#Maab adding this code here to change the value of refer-to variabler
#         if (is_method("REFER")) {
 #              remove_hf("Refer-To");
  #              insert_hf("Refer-To: sip:mmtel@10.161.224.75:5060\r\n");
#		xlog("L_ERR", "Changed Refer-To header in mt.cfg\n");
 #      	}

	$du = $ru;
	handle_ruri_alias();
	if ($rc == 1) {
		setflag(FLT_NAT);
	}
	xlog("L_DBG", "$$dP => $(dP{s.tolower}) ($du)\n");
	if ($(dP{s.tolower}) == "tls") {
		route(ENC_SRTP);
	} else if ($(dP{s.tolower}) == "ws") {
		# Even WSS is incorrectly shown as WS
		route(ENC_WSS_RTP);
	} else if ($(dP{s.tolower}) == "wss") {
		route(ENC_WSS_RTP);
	} else {
		route(ENC_RTP);
		xlog("L_INFO", "[$tU $fU $ci $rm] Setting MT Flags RTPEngine\n");
		xlog("L_INFO", "[$tU $fU $ci $rm] Setting MT Offer Flag: $avp(rtpproxy_offer_flags)\n");
		xlog("L_INFO", "[$tU $fU $ci $rm] Setting MT Answer Flag: $avp(rtpproxy_answer_flags)\n");
	}

	t_on_reply("MT_reply");
	t_on_failure("MT_failure");

	# Strip P-Asserted Identity
	remove_hf("P-Asserted-Identity");
	# Remove User-Agent
	remove_hf("User-Agent");

	# Handle NAT
	route(NATMANAGE);

	$avp(REAL_URI_AVP) = $ru;
	$avp(DD_AVP) = $dd;
	$avp(DP_AVP) = $dp;
}

failure_route[MT_failure] {
	xlog("L_INFO", "[$tU $fU $ci $rm] In route MT_Failure\n");
	if (is_method("INVITE|MESSAGE|NOTIFY")) {
		if (t_branch_timeout() || t_check_status("408|[5-6]..")) {
			xlog("L_INFO", "[$tU $fU $ci $rm] Unregister: $avp(REAL_URI_AVP) ($avp(DD_AVP) : $avp(DP_AVP))\n");
			pcscf_unregister("location", "$avp(REAL_URI_AVP)", "$avp(DD_AVP)", "$avp(DP_AVP)");
		}
	}
	if (!t_check_status("486|487")) {
		update_stat("mt_ner", "+1");
	}
	route(NATMANAGE);

	if (t_check_status("480")) {
		xlog("L_INFO", "[$tU $fU $ci $rm] Received 480 In route MT_Failure with Header: $hdr(Reason) \n");
		if (is_present_hf("Reason")) {
			send_reply("503", "CBS Rejected Call");
			exit;
		}
        }

	if (t_branch_timeout() || t_check_status("408|[5-6]..")) {
		send_reply("480", "Temporarily Unavailable");
		exit;
	}
}

######################################################################
# Replies to Originating Initial Requests
######################################################################
onreply_route[MT_reply] {
#!ifdef WITH_X2
	route(LI);
#!endif
	if ((status =~ "180|183") && ($sht(a=>$ci::start_time) != $null)) {
		#update stats for register reply on success
        	$var(start_secs) = $(sht(a=>$ci::start_time){s.select,0,.});
        	$var(start_usecs) = $(sht(a=>$ci::start_time){s.select,1,.});
        	$var(diff_secs) = $TV(s) - $var(start_secs);
        	$var(diff_usecs) = $TV(u) - $var(start_usecs);
        	$var(diff_ms) = $var(diff_secs)*1000 + ($var(diff_usecs)/1000);
        	$sht(a=>$ci::start_time)=0;
        	$var(stat_add) = "+" + $var(diff_ms);

		# Update stats:
        	xlog("L_DBG", "CST [$ci] took $var(stat_add)ms\n");
        	update_stat("mt_cst_ringing", "+1");
        	update_stat("mt_cst_time", "$var(stat_add)");

		# Delete the value, it was counted
		$sht(a=>$ci::start_time) = $null;
		#route(STORE_TAGS);
	}

	if (status == "200") {
        	update_stat("mt_success", "+1");
	}

	if (check_route_exists("SBC_MT")) {
		if (!strempty($(ct{tobody.params}))) {
			append_hf("X-C-Params: $(ct{tobody.params}{s.encode.base64})\r\n");
		}
	}
      ############# NEW CODE ####################
      # if ((status =~ "180|183") && (has_body("application/sdp") || get_body_part("application/sdp", "$var(foo)"))) {
	#	xlog("180: Remove SDP Body");
#		change_reply_status("180", "Ringing");
#		remove_body();
#		msg_apply_changes();
#	}
       ###########################################
        # if ((status =~ "180|183") {
        #  change_reply_status("180", "Ringing");
       #   remove_body();
      #    msg_apply_changes();
     #     }
  if (t_check_status("180|183|200")) {
		if (!pcscf_is_registered("location")) {
			xlog("L_DBG", "IMS: INSIDE TERM_INITIAL_REPLY: can't find contact [$ct] in P-CSCF usrloc\n");
			send_reply("403","Forbidden - not registered with P-CSCF");
			break;
		}

		if (!pcscf_assert_called_identity("location")) {
			xlog("L_INFO", "[$tU $fU $ci $rm] Adding MT P-Asserted-Identity \n");
			xlog("L_DBG", "P-Called-Party-ID not asserted - using default " + "$pcscf_asserted_identity");
			#append_hf("P-Asserted-Identity: <$pcscf_asserted_identity>\r\n");
			append_hf("P-Asserted-Identity: <$ai>\r\n");
		}
		remove_hf("P-Preferred-Identity");
	}

#!ifdef WITH_RX
  if (t_check_status("183|200")){
		msg_apply_changes();
		xlog("L_DBG", "IMS: Received 183 inside term_initial_reply\n");

		xlog("L_DBG", "About to test if this is a retransmitted reply which is still currently suspended\n");
		if (t_is_retr_async_reply()) {
	                xlog("L_DBG", "Dropping retransmitted reply which is still currently suspended\n");
       		         drop();
       		}

		xlog("L_DBG","Diameter: Term authorizing media via Rx\n");
		$avp(FTAG_CUSTOM_AVP)=$ft;
		$avp(TTAG_CUSTOM_AVP)=$tt;
		$avp(CALLID_CUSTOM_AVP)=$ci;

		#$var(aarret) = Rx_AAR("MT_aar_reply","term", "", -1);
		$var(aarret) = Rx_AAR("MT_aar_reply","term", "$(tU{s.substr,1,13})", 0);
		xlog("L_DBG", "AAR return code is $var(aarret)\n");

		 switch ($var(aarret)) {
                        case 1:
                                #suspend was successful and we must break
                                xlog("L_DBG", "Success sending AAR for media\n");
                                exit;

                        case -1:
                                #this is retransmitted response so we just drop it
                                xlog("L_DBG", "AAR still processing dropping retransmitted response\n");
                                drop();
                                exit;

                        default:
                                xlog("L_ERR", "Unable to send AAR for media\n");
#!ifdef DROP_ON_FAILED_RX
                                #comment this if you want to allow even if Rx fails
                                dlg_terminate("all", "Sorry no QoS available");
#!endif
                                exit;

                }
	}
}

route[MT_aar_reply]
{
        xlog("L_DBG", "IMS: TERM_SESSION_AAR_REPLY\n");

        #this is async so to know status we have to check the reply avp
	switch ($avp(s:aar_return_code)) {
                case 1:
                        xlog("L_DBG", "Diameter: Orig AAR success on media authorization\n");
                        break;
                default:
                        xlog("L_ERR", "IMS: AAR failed Orig\n");
                        xlog("L_ERR", "IMS: ttag: "+ "$avp(TTAG_CUSTOM_AVP)");
                        xlog("L_ERR", "IMS: ftag: "+ "$avp(FTAG_CUSTOM_AVP)");
                        xlog("L_ERR", "IMS: callid: "+ "$avp(CALLID_CUSTOM_AVP)");
#!ifdef DROP_ON_FAILED_RX
                        #comment this if you want to allow even if Rx fails
                        if(dlg_get("$avp(CALLID_CUSTOM_AVP)","$avp(FTAG_CUSTOM_AVP)","$avp(TTAG_CUSTOM_AVP)")){
                                dlg_terminate("all", "Sorry no QoS available");
                                exit;
                        }
#!endif
        }
#!endif
	# In case of 1xx and 2xx do NAT
	if(status=~"[12][0-9][0-9]")
		route(NATMANAGE);
}


######################################################################
# In-Dialog-MT-Requests
######################################################################
route[MT_indialog] {
#!ifdef WITH_X2
	route(LI);
#!endif
	#resetflag(FLT_MOBILE_ORIG);
	t_on_reply("MT_indialog_reply");
}

onreply_route[MT_indialog_reply] {
#!ifdef WITH_X2
	route(LI);
#!endif
	# In case of 1xx and 2xx do NAT
	if(status=~"[12][0-9][0-9]")
		route(NATMANAGE);

#!ifdef WITH_RX
	if(t_check_status("200") && is_method("INVITE")) {
		if (t_is_retr_async_reply()) {
			xlog("L_DBG", "Dropping retransmitted reply which is still currently suspended\n");
			drop();
		}

		xlog("L_DBG", "IMS: TERM_SUBSEQUENT reply. This is a 200 OK to a re-INVITE\n");
		xlog("L_DBG","Diameter: Term authorizing media via Rx\n");
		$avp(FTAG_CUSTOM_AVP)=$ft;
		$avp(TTAG_CUSTOM_AVP)=$tt;
		$avp(CALLID_CUSTOM_AVP)=$ci;

		$var(aarret) = Rx_AAR("MT_indialog_aar_reply","term", "", -1);
		#$var(aarret) = Rx_AAR("MT_indialog_aar_reply","term", "$tU", 0);
		xlog("L_DBG", "AAR return code is $var(aarret)\n");

		switch ($var(aarret)) {
                        case 1:
                                #suspend was successful and we must break
                                xlog("L_DBG", "Success sending AAR for media\n");
                                exit;

                        case -1:
                                #this is retransmitted response so we just drop it
                                xlog("L_DBG", "AAR still processing dropping retransmitted response\n");
                                drop();
                                exit;

                        default:
                                xlog("L_ERR", "Unable to send AAR for media\n");
#!ifdef DROP_ON_FAILED_RX
                                #comment this if you want to allow even if Rx fails
                                dlg_terminate("all", "Sorry no QoS available");
#!endif
                                exit;

                }
	}
}

route[MT_indialog_aar_reply]
{
        #this is async so to know status we have to check the reply avp
	switch ($avp(s:aar_return_code)) {
                case 1:
                        xlog("L_DBG", "Diameter: Orig AAR success on media authorization\n");
                        break;
                default:
                        xlog("L_ERR", "IMS: AAR failed Orig\n");
                        xlog("L_ERR", "IMS: ttag: "+ "$avp(TTAG_CUSTOM_AVP)");
                        xlog("L_ERR", "IMS: ftag: "+ "$avp(FTAG_CUSTOM_AVP)");
                        xlog("L_ERR", "IMS: callid: "+ "$avp(CALLID_CUSTOM_AVP)");
#!ifdef DROP_ON_FAILED_RX
                        #comment this if you want to allow even if Rx fails
                        if(dlg_get("$avp(CALLID_CUSTOM_AVP)","$avp(FTAG_CUSTOM_AVP)","$avp(TTAG_CUSTOM_AVP)")){
                                dlg_terminate("all", "Sorry no QoS available");
                                exit;
                        }
#!endif
        }
#!endif
}


route[STORE_TAGS] {

	xlog("L_INFO", "[$tU $fU $ci $rm] Storing Call tags from packet 183/180 in MT \n");
	#$var(place)="sip:"+$tU+"@ims.mnc006.mcc410.3gppnetwork.org;user=phone;method=INVITE?Replaces="+$ci+"%3Bto-tag%3D"+$tt+"%3Bfrom-tag%3D"+$ft;
	$var(place)=$ci+";to-tag="+$tt+";from-tag="+$ft;
	#append_hf("Replace: $var(Replace)\r\n");
	#avp_db_query("select password, ha1 from subscriber where username='$tu'","$avp(i:678);$avp(i:679)");
	avp_db_query("INSERT INTO MT_CALL_TAGS (to_number,call_id,to_tag,from_tag,refer_to) VALUES ('$tU','$ci','$tt','$ft','$var(place)')");	
	xlog("L_INFO", "[$tU $fU $ci $rm] MT Saving Header $var(place) \n");
}
