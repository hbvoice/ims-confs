######################################################################
# Originating, Intial Requests
######################################################################
route[MO]
{
	t_newtran();
	xlog("L_INFO", "[$tU $fU $ci $rm] in Route MO \n");

#!ifdef WITH_X2
	route(LI);
#!endif

	if (is_method("INVITE")) {
		# Provide some statistics
		update_stat("mo_total", "+1");
		# Save time, for calculating CST
		if ($sht(a=>$ci::start_time) == $null || $sht(a=>$ci::start_time) == 0) {
	    $sht(a=>$ci::start_time) = $TV(Sn);
		}
	}


	 #Maab adding this code here to change the value of refer-to variabler
   #      if (is_method("REFER")) {
    #           remove_hf("Refer-To");
     #           insert_hf("Refer-To: sip:mmtel@10.161.224.75:5060\r\n");
#		xlog("L_ERR", "Changed Refer-To header in mo.cfg\n");
 #       }
	
	route_if_exists("MO_CUSTOM");

	force_rport();
	if(is_method("INVITE|SUBSCRIBE|UPDATE|REGISTER")) {
		set_contact_alias();
	}
	setflag(FLT_NAT);

#!ifdef WITH_MSRP
	route(add_msrp_relay);
#!endif

	xlog("L_INFO", "[$tU $fU $ci $rm] Cleaning To URI in route MO \n");
	xlog("L_INFO", "[$tU $fU $ci $rm] To: $tu From: $fu R-URI: $ru \n");
	xlog("L_INFO", "[$tU $fU $ci $rm] R-User: $rU From: $fu R-Domain: $rd \n");

#!ifdef CLEAN_URI
#	xlog("L_INFO", "[$tU $fU $ci $rm] To: $tu From: $fu \n");
	if (is_method("INVITE")) {
		# Strip Transport from RURI:
		$ru = $(ru{re.subst,/;transport=[A-Za-z]*//g});
		$var(from) = $fu;
		if ($fd == $null) {
			tel2sip("$ru", "NETWORKNAME", "$ru");
			tel2sip("$fu", "NETWORKNAME", "$var(from)");
			uac_replace_from("$fU", $var(from));
		} else {
			tel2sip("$ru", "$fd", "$ru");
		}

		# Strip Port and other stuff:
		#if( $(rU{s.substr,1,2}) == '92') {
		if( $rd == $null ) {
			$ru = "sip:"+$rU+"@ims.mnc006.mcc410.3gppnetwork.org";
		}else {
			$ru = "sip:"+$rU+"@"+$rd;
		}

		uac_replace_to("$rU", "$ru");
	}

/*
	# Cleaning Referred-By URI
	if(is_method("REFER")) {
		xlog("L_INFO", "[$tU $fU $ci $rm] Cleaning Referred-By URI: $hdr(Referred-By) \n");
		#std_tel2sip("$hdr(Referred-By), "$fd", "$var(referredByUri)");
		$var(referredByUri)="sip"+$(hdr(Referred-By){s.substr,3,0})+"@conf-factory.ims.mnc006.mcc410.3gppnetwork.org";
		remove_hf("Refrred-By");
		append_hf("Referred-By:<$var(referredByUri)>\r\n");
	}
*/
#!endif
	xlog("L_INFO", "[$tU $fU $ci $rm] ru:$ru \n");

	# Process route headers, if any:
	loose_route();
	if (!pcscf_is_registered("location")) {
		#pcscf_save("location");
		send_reply("403","Forbidden - You must register first with a S-CSCF");
		drop;
		exit;
	}

	# We do not trust the user, let's remove the P-Asserted-Identity, if any:
	remove_hf("P-Asserted-Identity");
	remove_hf("P-Preferred-Identity");

	# Add P-Charging-Vector
	sip_p_charging_vector("g");

	if (is_present_hf("P-Preferred-Identity") && pcscf_assert_identity("location", "$hdr(P-Preferred-Identity)")) {
		append_hf("P-Asserted-Identity: $hdr(P-Preferred-Identity)\r\n");
	} else if (is_present_hf("P-Asserted-Identity") && pcscf_assert_identity("location", "$hdr(P-Asserted-Identity)")) {
		append_hf("P-Asserted-Identity: $hdr(P-Asserted-Identity)\r\n");
	} else if (pcscf_assert_identity("location", "$(fu{tobody.uri})")) {
		append_hf("P-Asserted-Identity: <$(fu{tobody.uri})>\r\n");
	} else {
		xlog("L_INFO", "[$tU $fU $ci $rm] Adding P-Asserted-Identity \n");
		#append_hf("P-Asserted-Identity: <$pcscf_asserted_identity>\r\n");
		append_hf("P-Asserted-Identity: <$ai>\r\n");
	}

	if (!pcscf_follows_service_routes("location")){
		#Variant 1 - deny access to the network
		#send_reply("400","Bad Request - Not following indicated service routes");
		#break;

		#Variant 2 - enforce routes and let the dialog continue
		pcscf_force_service_routes("location");
	}

	# add IBCF/THIG route here if required
	# Check for "sec-agree" in the Require header:
	if (is_present_hf("Require") && $hdr(Require) =~ ".*sec-agree.*") {
		# Remove the old Require-Header:
		remove_hf("Require");
		# Replace ", sec-agree" with ""
		$var(new_hdr) = $(hdr(Require){re.subst,/[, ]*sec-agree//gi});
		if ($(var(new_hdr){s.len}) > 0) {
			append_hf("Require: $var(new_hdr)\r\n");
		}
	}

	# Check for "sec-agree" in the Proxy-Require header:
	if (is_present_hf("Proxy-Require") && $hdr(Proxy-Require) =~ ".*sec-agree.*") {
		# Remove the old Proxy-Require-Header:
		remove_hf("Proxy-Require");
		# Replace ", sec-agree" with ""
		$var(new_hdr) = $(hdr(Proxy-Require){re.subst,/[, ]*sec-agree//gi});
		if ($(var(new_hdr){s.len}) > 0) {
			append_hf("Proxy-Require: $var(new_hdr)\r\n");
		}
        }
	remove_hf("Security-Verify");

#!ifdef TRF_FUNCTION
	$var(trf) = TRF_FUNCTION;
	# Check for "sec-agree" in the Proxy-Require header:
	if (is_present_hf("Feature-Caps")) {
		# Remove the old Proxy-Require-Header:
		remove_hf("Feature-Caps");
		append_hf("Feature-Caps: $hdr(Feature-Caps);+g.3gpp.trf=\"<sip:$var(trf);lr>\"\r\n");
        } else {
		append_hf("Feature-Caps: *;+g.3gpp.trf=\"<sip:$var(trf);lr>\"\r\n");
	}
#!endif
	# Add a visited Network-ID-Header:
	if (is_present_hf("P-Visited-Network-ID")) {
		$var(new_hdr) = "NETWORKNAME, "+$hdr(P-Visited-Network-ID);
		append_hf("P-Visited-Network-ID: $var(new_hdr)\r\n");
	} else {
		append_hf("P-Visited-Network-ID: NETWORKNAME\r\n");
	}

	# Add a P-Access-Network-Info Header:
	if (is_present_hf("P-Access-Network-Info")) {
		remove_hf("P-Access-Network-Info");
		append_hf("P-Access-Network-Info: $hdr(P-Access-Network-Info);eth-location=$si:$sp\r\n", "P-Access-Network-Info");
	} else {
		append_hf("P-Access-Network-Info: IEEE-802.11;eth-location=$si:$sp\r\n");
	}

	# prepend mo as user for record route
	$avp(RR_CUSTOM_USER_AVP)="mo";
	# Set Flag for MO:
	setflag(FLT_MOBILE_ORIG);
	# Increase timer for inbound requests, we may have to do failover:
	t_set_fr(120000, 30000);
	if (is_method("INVITE")) {
		if ($pr != "udp") {
			# raise the TCP lifetime to a bigger value
			tcp_set_connection_lifetime("$conid", "14400");
		}
		# SRTP in RTP Ã¼bersetzen
		if ($pr == "tls") {
			route(DEC_SRTP);
		} else if ($pr == "ws") {
			route(DEC_WS_RTP);
		} else if ($pr == "wss") {
			route(DEC_WSS_RTP);
		} else {
			route(DEC_RTP);
			xlog("L_INFO", "[$tU $fU $ci $rm] Setting MO Flags RTPEngine\n");
			xlog("L_INFO", "[$tU $fU $ci $rm] Setting MO Offer Flag: $avp(rtpproxy_offer_flags)\n");
			xlog("L_INFO", "[$tU $fU $ci $rm] Setting MO Answer Flag: $avp(rtpproxy_answer_flags)\n");
		}
		# Handle NAT
		route(NATMANAGE);
	}

	t_on_reply("MO_reply");
	if(!t_is_set("failure_route")) t_on_failure("MO_FAILURE");
}

failure_route[MO_FAILURE] {
	xlog("L_INFO", "[$tU $fU $ci $rm] In route MO_Failure with Header $hdr(Reason) \n");
	# Update stats:
	if (t_check_status("486|487")) {
		update_stat("mo_ner", "+1");
	}
}

######################################################################
# Replies to Originating Initial Requests
######################################################################
onreply_route[MO_reply] {
#!ifdef WITH_X2
	route(LI);
#!endif

	if ((status =~ "180|183") && ($sht(a=>$ci::start_time) != $null)) {
		#update stats for register reply on success
        	$var(start_secs) = $(sht(a=>$ci::start_time){s.select,0,.});
        	$var(start_usecs) = $(sht(a=>$ci::start_time){s.select,1,.});
        	$var(diff_secs) = $TV(s) - $var(start_secs);
        	$var(diff_usecs) = $TV(u) - $var(start_usecs);
        	$var(diff_ms) = $var(diff_secs)*1000 + ($var(diff_usecs)/1000);
        	$sht(a=>$ci::start_time)=0;
        	$var(stat_add) = "+" + $var(diff_ms);

		# Update stats:
        	xlog("L_DBG", "CST [$ci] took $var(stat_add)ms\n");
        	update_stat("mo_cst_ringing", "+1");
        	update_stat("mo_cst_time", "$var(stat_add)");

		# Delete the value, it was counted
		$sht(a=>$ci::start_time) = $null;
		#route(STORE_TAGS_MO);
	}
	if (status == "200") {
        	update_stat("mo_success", "+1");
	}

	if (is_present_hf("X-C-Params")) {
		remove_hf("Contact");
		remove_hf("X-C-Params");
		append_hf("Contact: <$(ct{nameaddr.uri})>;$(hdr(X-C-Params){s.decode.base64})\r\n");
	}

  xlog("L_INFO","$rs $rr\n");


	if ((status =~ "180") && (has_body("application/sdp") || get_body_part("application/sdp", "$var(foo)"))) {
                xlog("L_INFO","180: Remove SDP Body");
                change_reply_status("180", "Ringing");
                remove_body();
                msg_apply_changes();
        }

  	if (isflagset(FLT_183) && (status == 200) && (has_body("application/sdp") || get_body_part("application/sdp", "$var(foo)"))) {
  			xlog("L_INFO", "200: Change a=inactive to a=sendrecv");
  			replace_body("a=inactive", "a=sendrecv");
  			msg_apply_changes();
  	}

	# In case of 1xx and 2xx do NAT
	if(status=~"[12][0-9][0-9]")
		route(NATMANAGE);

	xlog("L_INFO", "[$tU $fU $ci $rm] Sending AAR Request with AVP Subscription-Id: $fU \n");
#!ifdef WITH_RX
  if (t_check_status("183|200") && (has_body("application/sdp") || get_body_part("application/sdp", "$var(foo)"))) {
		xlog("L_DBG", "IMS: Received 183/200 inside orig_initial_reply\n");

#!ifdef WITH_PRECONDITIONING
		if (!(is_present_hf("Require") && $hdr(Require) =~ ".*precondition.*")) {
			# Remove the old Require-Header:
			remove_hf("Require");
			if (is_present_hf("Require")) {
				append_hf("Require: $hdr(Require), precondition\r\n");
			} else {
				append_hf("Require: precondition\r\n");
			}
			if (!sdp_get_line_startswith("$avp(bas)", "b=AS")) {
				if (sdp_get_line_startswith("$avp(c)", "c=")) {
					subst_body('/^c=(.*)$/$avp(c)\r\nb=AS:41\r\nb=RS:512\r\nb=RR:1537/');
				}
				if (sdp_get_line_startswith("$avp(m)", "m=")) {
					subst_body('/^m=(.*)$/$avp(m)\r\nb=AS:41\r\nb=RS:512\r\nb=RR:1537/');
				}
			}
			if (!sdp_get_line_startswith("$avp(qos)", "a=curr:qos")) {
				replace_all("a=sendrecv", "a=sendrecv\r\na=curr:qos local sendrecv\r\na=curr:qos remote none\r\na=des:qos mandatory local sendrecv\r\na=des:qos mandatory remote sendrecv");
			}
			msg_apply_changes();
		}
#!endif

		if (t_is_retr_async_reply()) {
	                xlog("L_DBG", "Dropping retransmitted reply which is still currently suspended\n");
                	drop();
	        }
		msg_apply_changes();
		setflag(FLT_183);

		xlog("L_DBG","Diameter: Orig authorizing media via Rx\n");
		$avp(FTAG_CUSTOM_AVP)=$ft;
		$avp(TTAG_CUSTOM_AVP)=$tt;
		$avp(CALLID_CUSTOM_AVP)=$ci;

		#$var(aarret) = Rx_AAR("MO_aar_reply","orig", "", -1);
		$var(aarret) = Rx_AAR("MO_aar_reply","orig", "$(fu{s.substr,5,13})", 0);
                xlog("L_DBG", "AAR return code is $var(aarret)\n");

		switch ($var(aarret)) {
			case 1:
				#suspend was successful and we must break
	                        xlog("L_DBG", "Success sending AAR for media\n");
       		                exit;

			case -1:
				#this is retransmitted response so we just drop it
	                        xlog("L_DBG", "AAR still processing dropping retransmitted response\n");
       		                drop();
                 	       	exit;

			default:
				xlog("L_ERR", "Unable to send AAR for media\n");
#!ifdef DROP_ON_FAILED_RX
	                        #comment this if you want to allow even if Rx fails
				dlg_terminate("all", "Sorry no QoS available");
       		                exit;
#!endif
		}
	}
}

route[MO_aar_reply]
{
        #this is async so to know status we have to check the reply avp
	switch ($avp(s:aar_return_code)) {
		case 1:
			xlog("L_DBG", "Diameter: Orig AAR success on media authorization\n");
			break;
		default:
			xlog("L_ERR", "IMS: AAR failed Orig\n");
               		xlog("L_ERR", "IMS: ttag: "+ "$avp(TTAG_CUSTOM_AVP)");
	                xlog("L_ERR", "IMS: ftag: "+ "$avp(FTAG_CUSTOM_AVP)");
	                xlog("L_ERR", "IMS: callid: "+ "$avp(CALLID_CUSTOM_AVP)");
#!ifdef DROP_ON_FAILED_RX
			#comment this if you want to allow even if Rx fails
	                if(dlg_get("$avp(CALLID_CUSTOM_AVP)","$avp(FTAG_CUSTOM_AVP)","$avp(TTAG_CUSTOM_AVP)")){
                        	dlg_terminate("all", "Sorry no QoS available");
                       		exit;
               		}
#!endif
	}
#!endif
}


######################################################################
# In-Dialog-Mo-Requests
######################################################################
route[MO_indialog] {
	t_newtran();

#!ifdef WITH_X2
	route(LI);
#!endif

	xlog("L_INFO", "[$tU $fU $ci $rm] in Route MO_indialog $ru $rd\n");
	setflag(FLT_MOBILE_ORIG);
	t_on_reply("MO_indialog_reply");
}

onreply_route[MO_indialog_reply] {
#!ifdef WITH_X2
	route(LI);
#!endif
	# In case of 1xx and 2xx do NAT
	if(status=~"[12][0-9][0-9]")
		route(NATMANAGE);

	xlog("L_INFO", "[$tU $fU $ci $rm] Sending AAR Request with AVP Subscription-Id::: $fU \n");
#!ifdef WITH_RX
	if(t_check_status("200") && is_method("INVITE")) {
		if (t_is_retr_async_reply()) {
	                xlog("L_DBG", "Dropping retransmitted reply which is still currently suspended\n");
       	         	drop();
        	}

		msg_apply_changes();

      		xlog("L_DBG", "IMS: ORIG_SUBSEQUENT reply. This is a 200 OK to a re-INVITE\n");
		xlog("L_DBG","Diameter: Orig authorizing media via Rx\n");
		$avp(FTAG_CUSTOM_AVP)=$ft;
		$avp(TTAG_CUSTOM_AVP)=$tt;
		$avp(CALLID_CUSTOM_AVP)=$ci;

		$var(aarret) = Rx_AAR("MO_indialog_aar_reply","orig", "", -1);
		#$var(aarret) = Rx_AAR("MO_indialog_aar_reply","orig", "$fu", 2);
		xlog("L_DBG", "AAR return code is $var(aarret)\n");

		switch ($var(aarret)) {
                        case 1:
                                #suspend was successful and we must break
                                xlog("L_DBG", "Success sending AAR for media\n");
                                exit;

                        case -1:
                                #this is retransmitted response so we just drop it
                                xlog("L_DBG", "AAR still processing dropping retransmitted response\n");
                                drop();
                                exit;

                        default:
                                xlog("L_ERR", "Unable to send AAR for media\n");
                                #comment this if you want to allow even if Rx fails
                                dlg_terminate("all", "Sorry no QoS available");
                                exit;

                }
	}
}

route[MO_indialog_aar_reply]
{
        #this is async so to know status we have to check the reply avp
	switch ($avp(s:aar_return_code)) {
                case 1:
                        xlog("L_DBG", "Diameter: Orig AAR success on media authorization\n");
                        break;
                default:
                        xlog("L_ERR", "IMS: AAR failed Orig\n");
                        xlog("L_ERR", "IMS: ttag: "+ "$avp(TTAG_CUSTOM_AVP)");
                        xlog("L_ERR", "IMS: ftag: "+ "$avp(FTAG_CUSTOM_AVP)");
                        xlog("L_ERR", "IMS: callid: "+ "$avp(CALLID_CUSTOM_AVP)");
#!ifdef DROP_ON_FAILED_RX
			#comment this if you want to allow even if Rx fails
                        if(dlg_get("$avp(CALLID_CUSTOM_AVP)","$avp(FTAG_CUSTOM_AVP)","$avp(TTAG_CUSTOM_AVP)")){
                                dlg_terminate("all", "Sorry no QoS available");
                                exit;
                        }
#!endif
        }
#!endif
}


route[STORE_TAGS_MO] {

        xlog("L_INFO", "[$tU $fU $ci $rm] Storing Call tags from packet 183/180 in MO From tag:$ft and To tag: $tt \n");
	$var(Replace)="Replace="+$ci+"%3Bto-tag%3D"+$tt+"%3Bfrom-tag%3D"+$ft;
	xlog("L_INFO", "[$tU $fU $ci $rm] MO Saving Header $var(Replace) \n");
}
