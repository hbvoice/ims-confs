route[LI] {
  if (is_method("INVITE|CANCEL|ACK|UPDATE|BYE")) {
    sht_iterator_start("list", "legalintercept");
    while(sht_iterator_next("list")) {
      $var(search) = "^.*"+$shtitval(list)+".*$";
      // xlog("$shtitval(list): $var(search) (FU $fU, AI $ai, fu $fu, RU $ru, TU $tu, PU $pu)\n");
      if (($fU =~ $var(search)) || ($ai =~ $var(search)) || ($fu =~ $var(search)) || ($pu =~ $var(search))) {
        if (($sht(lidata=>$shtitkey(list)::server) != $null) && ($sht(lidata=>$shtitkey(list)::port) != $null)) {
          if ($sht(lidialog=>count) == $null) {
            $sht(lidialog=>count) = 0;
          }
          if ($sht(lidialog=>$ci) == $null) {
            $sht(lidialog=>$ci) = $shtinc(lidialog=>count);
            $sht(lidialog=>$ci::messageid) = 0;
          }
          $var(dialogid) = $sht(lidialog=>$ci);

          $var(mo_liid) = $shtitkey(list);
          $var(mo_server) = $sht(lidata=>$shtitkey(list)::server);
          $var(mo_port) = $sht(lidata=>$shtitkey(list)::port);
        	if (($sht(lidata=>$shtitkey(list)::x3server) != $null) && ($sht(lidata=>$shtitkey(list)::x3port) != $null)) {
        		setflag(FLT_X3);

            $var(x3server) = $sht(lidata=>$shtitkey(list)::x3server);
        		$var(x3port) = $sht(lidata=>$shtitkey(list)::x3port);
            if ($avp(x3meta) == $null) {
              $avp(x3meta) = $var(x3server)+":"+$var(x3port)+":"+$var(dialogid);
            } else {
              $avp(x3meta) = $avp(x3meta)+"-"+$var(x3server)+":"+$var(x3port)+":"+$var(dialogid);
            }
        	}
        } else {
          xlog("L_ERR", "Invalid LI Data: Server or Port is missing!\n");
        }
      } else {
        $var(mo_liid) = 0;
      }
      if (($ru =~ $var(search)) || ($tu =~ $var(search))) {
        if (($sht(lidata=>$shtitkey(list)::server) != $null) && ($sht(lidata=>$shtitkey(list)::port) != $null)) {
          if ($sht(lidialog=>count) == $null) {
            $sht(lidialog=>count) = 0;
          }
          if ($sht(lidialog=>$ci) == $null) {
            $sht(lidialog=>$ci) = $shtinc(lidialog=>count);
            $sht(lidialog=>$ci::messageid) = 0;
          }
          $var(dialogid) = $sht(lidialog=>$ci);

          $var(mt_liid) = $shtitkey(list);
          $var(mt_server) = $sht(lidata=>$shtitkey(list)::server);
          $var(mt_port) = $sht(lidata=>$shtitkey(list)::port);
        	if (($sht(lidata=>$shtitkey(list)::x3server) != $null) && ($sht(lidata=>$shtitkey(list)::x3port) != $null)) {
        		setflag(FLT_X3);
        		$var(x3server) = $sht(lidata=>$shtitkey(list)::x3server);
        		$var(x3port) = $sht(lidata=>$shtitkey(list)::x3port);
            if ($avp(x3meta) == $null) {
              $avp(x3meta) = $var(x3server)+":"+$var(x3port)+":"+$var(dialogid);
            } else {
              $avp(x3meta) = $avp(x3meta)+"-"+$var(x3server)+":"+$var(x3port)+":"+$var(dialogid);
            }
        	}
        } else {
          xlog("L_ERR", "Invalid LI Data: Server or Port is missing!\n");
        }
      } else {
        $var(mt_liid) = 0;
      }
      // xlog("$$var(mo_liid) => $var(mo_liid)\n");
      // xlog("$$var(mt_liid) => $var(mt_liid)\n");
      if (($var(mo_liid) != 0) || ($var(mt_liid) != 0)) {
        if (($var(mt_server) == $var(mo_server)) && ($var(mt_port) == $var(mo_port))) {
          $var(server) = $var(mo_server);
          $var(port) = $var(mo_port);
          route(SEND_X2);
        } else {
          if ($var(mo_liid) != 0) {
            $var(server) = $var(mo_server);
            $var(port) = $var(mo_port);
            route(SEND_X2);
          }
          if ($var(mt_liid) != 0) {
            $var(server) = $var(mt_server);
            $var(port) = $var(mt_port);
            route(SEND_X2);
          }
        }

      }
    }
    sht_iterator_end("list");
  }
}

route[SEND_X2] {
#!ifdef FLT_X2
  setflag(FLT_X2);
#!endif
  $var(dialogid) = $sht(lidialog=>$ci);
  $var(messageid) = $shtinc(lidialog=>$ci::messageid);

  $var(message) = "{}";

  $var(header) = "{}";
  jansson_set("string", "source", $Ri, "$var(header)");
  jansson_set("string", "destination", $var(server), "$var(header)");
  jansson_set("string", "type", "sip", "$var(header)");
  jansson_set("integer", "version", 1, "$var(header)");
  jansson_set("string", "timestamp", "$timef(%FT%T.00000%z)", "$var(header)");

  jansson_set("object", "header", "$var(header)", "$var(message)");

  $var(body) = "{}";
  jansson_set("integer", "dialogid", $var(dialogid), "$var(body)");
  jansson_set("integer", "messageid", $var(messageid), "$var(body)");
  jansson_set("string", "timestamp", "$timef(%FT%T.00000%z)", "$var(body)");

  $var(list) = '[]';

  if ($var(mo_liid) != 0) {
    $var(interception) = "{}";
    jansson_set("integer", "liid", $var(mo_liid), "$var(interception)");
    if (is_direction("downstream")) {
      jansson_set("string", "direction", "fromtarget", "$var(interception)");
    } else {
      jansson_set("string", "direction", "totarget", "$var(interception)");
    }
    jansson_append("object", "", "$var(interception)", "$var(list)");
  }
  if ($var(mt_liid) != 0) {
    $var(interception) = "{}";
    jansson_set("integer", "liid", $var(mt_liid), "$var(interception)");
    if (is_direction("downstream")) {
      jansson_set("string", "direction", "totarget", "$var(interception)");
    } else {
      jansson_set("string", "direction", "fromtarget", "$var(interception)");
    }
    jansson_append("object", "", "$var(interception)", "$var(list)");
  }

  jansson_set("array", "interceptions", "$var(list)", "$var(body)");

  jansson_set("string", "ip.src", "$si:$sp", "$var(body)");
  jansson_set("string", "ip.dst", "$Ri:$Rp", "$var(body)");

  jansson_set("string", "data", "$(mb{s.encode.base64})", "$var(body)");
  // jansson_set("string", "data", "$mb", "$var(body)");
  jansson_set("object", "body", "$var(body)", "$var(message)");

  nosip_send("sip:$var(server):$var(port);transport=tcp", "X2/$(var(message){s.len})/$var(message)");
}

event_route[nosip:msg] {
   xlog("non-sip packet received - content [[$mb]] from [$si:$sp]\n");
   exit;
}

route[LI_PING] {
  sht_iterator_start("list", "legalintercept");
  while(sht_iterator_next("list")) {
    if (($sht(lidata=>$shtitkey(list)::server) != $null) && ($sht(lidata=>$shtitkey(list)::port) != $null)) {
      nosip_send("sip:$sht(lidata=>$shtitkey(list)::server):$sht(lidata=>$shtitkey(list)::port);transport=tcp", "X2/0/");
    }
  }
  sht_iterator_end("list");
}
