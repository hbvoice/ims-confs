#
# TelcoSuite (V3) Proxy-CSCF
#
# Kamailio (OpenSER) SIP Server
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Refer to the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php
# for an explanation of possible statements, functions and parameters.
#

#import_file "listen.cfg"
import_file "pcscf.cfg"

####### Defined Values #########
# *** Value defines - IDs used later in config
#!define DISPATCHER_LIST_SBC 1
#!define DISPATCHER_LIST_REGISTER 2

#!define DISPATCHER_DST_AVP "i:1"
#!define DISPATCHER_GRP_AVP "i:2"
#!define DISPATCHER_CNT_AVP "i:3"
#!define DISPATCHER_SOCK_AVP "i:4"

#!define RR_CUSTOM_USER_AVP "i:5"
#!define DLG_TIMEOUT_AVP "i:6"

#!define REAL_URI_AVP "i:7"
#!define DD_AVP "i:8"
#!define DP_AVP "i:9"

#!define FLT_MOBILE_ORIG 1
#!define FLT_DIALOG 2
#!define FLT_NAT 3
#!define FLT_RTP 4
#!define FLT_CAPTURE 5
#!define FLT_183 6
#!define FLT_X3 7

####### Global Parameters #########

#!ifdef WITH_DEBUG
debug=0
log_stderror=no
#!else
debug=0
log_stderror=no
#!endif

rundir="/var/run/kamailio_pcscf"

#memdbg=5
#memlog=5
#mem_safety=0
mem_join=1
log_name="[Proxy-CSCF]"

max_while_loops=5000

#!ifdef WITH_XMLRPC
listen=tcp:192.168.0.179:8099
#!endif

mhomed=1
# Locks all ser pages into memory making it unswappable (in general one
# doesn't want his sip proxy swapped out )
mlock_pages=yes
# Tries to pre-fault all the shared memory, before starting. When "on", start
# time will increase, but combined with mlock_pages will guarantee ser will get
# all its memory from the beginning (no more kswapd slow downs)
shm_force_alloc=yes

# Do SRV-Loadbalancing:
dns_srv_lb=yes
# Always prefer IPv6:
dns_try_ipv6=no
# DNS-Based failover
use_dns_failover=yes
# Query NAPTR-Records as well:
dns_try_naptr=no

user_agent_header="User-Agent: TelcoSuite Proxy-CSCF"
server_header="Server: TelcoSuite Proxy-CSCF"

log_facility=LOG_LOCAL0

fork=yes
children=4

#!ifndef TCP_PROCESSES
# Number of TCP Processes
#!define TCP_PROCESSES 16
#!endif

#!ifdef WITH_TLS
# Check, if TCP is enabled:
#!ifndef WITH_TCP
#!define WITH_TCP
#!endif
enable_tls=yes
#!endif

#!ifdef WITH_XMLRPC
#!ifndef WITH_TCP
#!define WITH_TCP
#!endif
#!ifndef TCP_PROCESSES
# Number of TCP Processes
#!define TCP_PROCESSES 3
#!endif
#!endif

#!ifdef WITH_TCP
# If a message received over a tcp connection has "alias" in its via a new tcp
# alias port will be created for the connection the message came from (the
# alias port will be set to the via one).
#
# Note: For NAT traversal of TCP clients it is better to not use
# tcp_accept_aliases but just use nathelper module and
# fix_nated_[contact|register] functions.
tcp_accept_aliases=no
# Enable SIP outbound TCP keep-alive using PING-PONG (CRLFCRLF - CRLF).
tcp_crlf_ping=yes

tcp_accept_no_cl=yes
#tcp_rd_buf_size=16384
tcp_rd_buf_size=65535

# use 10s as default lifetime
tcp_connection_lifetime=1800
#tcp_connection_lifetime=60
#tcp_connect_timeout=3
tcp_keepalive=no
tcp_keepcnt=2
tcp_keepidle=15
tcp_keepintvl=8
tcp_max_connections=5000
#####new-added-parameters########
#tcp_defer_accept=yes
#tcp_syncnt=3
#!ifdef TCP_PROCESSES
tcp_children=TCP_PROCESSES
#!endif
#!else
disable_tcp=yes
#!endif

/* uncomment the next line to disable the auto discovery of local aliases
   based on reverse DNS on IPs (default on) */
auto_aliases=no

/* uncomment and configure the following line if you want Kamailio to
   bind on a specific interface/port/proto (default bind on all available) */

system.shutdownmode = 0 desc "System shutdown mode"
system.service = "Proxy-CSCF" desc "Function of this server"

####### Modules Section ########

# set paths to location of modules
mpath="/opt/kamailio/lib64/kamailio//modules/"

# Fifo Module
# Kamailio Extensions (e.g. MI:uptime, MI:version, cfg:isflagset etc.)
loadmodule "kex"
# Transaction Module
loadmodule "tm"
loadmodule "tmx"
loadmodule "sl"
loadmodule "rr"
loadmodule "pv"
loadmodule "cfgutils"
loadmodule "maxfwd"
loadmodule "textops"
loadmodule "textopsx"
# SIP-Utilities: options_reply
loadmodule "siputils"
loadmodule "sanity"
loadmodule "ctl"
loadmodule "cfg_rpc"
loadmodule "xlog"
loadmodule "auth"
loadmodule "dispatcher"
loadmodule "path"
loadmodule "statistics"
loadmodule "ipops"
loadmodule "uac"
loadmodule "tcpops"

loadmodule "ims_dialog"
loadmodule "ims_usrloc_pcscf"
loadmodule "ims_ipsec_pcscf"
loadmodule "ims_registrar_pcscf"

#loadmodule "topoh"
#modparam("topoh", "mask_callid", 1)
#modparam("topoh", "callid_prefix", "4711**")

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc"
#!endif

#!ifdef WITH_REGINFO
loadmodule "pua"
#!endif

#!ifdef DB_URL
loadmodule "db_mysql"
#!ifdef DB_URL2
loadmodule "db_cluster"
#!endif
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger"
#!endif

loadmodule "usrloc"
loadmodule "registrar"

loadmodule "nathelper"

#!ifdef WITH_ANTIFLOOD
loadmodule "pike"
#!endif

#!ifdef WITH_TLS
loadmodule "tls"
#!endif

loadmodule "sdpops"
loadmodule "rtpengine"

#!ifdef WITH_WEBSOCKET
loadmodule "xhttp.so"
loadmodule "websocket.so"
#!else
#!ifdef WITH_XMLRPC
loadmodule "xhttp.so"
#!endif
#!endif

#!ifdef WITH_RX
loadmodule "cdp"
loadmodule "cdp_avp"
loadmodule "ims_qos"
#!endif

#!ifdef CAPTURE_NODE
loadmodule "siptrace"
#!endif

#!ifdef WITH_MSRP
loadmodule "msrp"
#!endif

#!ifdef WITH_X2
loadmodule "rtimer"
loadmodule "jansson.so"
loadmodule "nosip.so"
#!endif

# HTable as a cache:
loadmodule "htable"

# ----------------- setting module-specific parameters ---------------

# ----- ctl params -----
modparam("ctl", "binrpc", "unix:/var/run/kamailio_pcscf/kamailio_ctl")

loadmodule "debugger.so"
modparam("debugger", "mod_hash_size", 5)
modparam("debugger", "mod_level_mode", 1)
modparam("debugger", "log_level", 1)
modparam("debugger", "log_prefix", "pcscf fuckery:")

#!ifdef DB_URL2
# ----- db_cluster params -----
modparam("db_cluster", "connection", DB_URL)
modparam("db_cluster", "connection", DB_URL2)
modparam("db_cluster", "cluster", "cluster1=>con1=2s2s;con2=1s1s")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
modparam("htable", "htable", "ipban=>size=8;autoexpire=300")
modparam("htable", "htable", "failedauth=>size=8;autoexpire=120")
#!endif

modparam("htable", "htable", "a=>size=8;autoexpire=20")

#!ifdef WITH_X2
modparam("htable", "db_url", DB_LI_URL)
modparam("htable", "htable", "legalintercept=>size=8;dbtable=legalintercept")
modparam("htable", "htable", "lidata=>size=8;dbtable=lidata")
modparam("htable", "htable", "lidialog=>size=8;autoexpire=14400")
modparam("rtimer", "timer", "name=LI;interval=10;mode=1;")
modparam("rtimer", "exec", "timer=LI;route=LI_PING")
#modparam("nosip", "msg_match", "^X2/")
#!endif

#!ifdef WITH_MSRP
modparam("htable", "htable", "msrpauth=>size=8;autoexpire=7200;")
modparam("htable", "htable", "msrpsession=>size=8;autoexpire=7200;")
modparam("msrp", "cmap_size", 8)
#!endif

modparam("htable", "htable", "tcptls=>size=8")
modparam("htable", "htable", "tcptls_src=>size=8")

modparam("uac","restore_mode","auto")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
#modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 10 sec
modparam("tm", "fr_timer", 10000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)
# Increase Timer1 to avoid retransmissions
modparam("tm", "retr_timer1", 2500)

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 1)
# add a Username to RR-Header
modparam("rr", "add_username", 1)
# Take User from a custom AVP
modparam("rr", "custom_user_avp", "$avp(RR_CUSTOM_USER_AVP)")

#modparam("tm", "callid_matching", 1)

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/etc/kamailio_pcscf/tls.cfg")
#!endif

# ----- rtpproxy params -----
#!ifdef DB_URL
#!ifdef DB_URL2
modparam("rtpengine", "db_url", "cluster://cluster1")
#!else
modparam("rtpengine", "db_url", DB_URL)
#!endif
#!else
modparam("rtpengine", "rtpengine_sock", "1 == udp:192.168.0.179:9910")
modparam("rtpengine", "rtpengine_sock", "2 == udp:192.168.0.179:9911")
#!endif
modparam("rtpengine", "setid_avp", "$avp(setid)")
modparam("rtpengine", "extra_id_pv", "$avp(extra_id)")
modparam("rtpengine", "rtpengine_allow_op", 1)

# Extract Statistics from RTPEngine
modparam("rtpengine", "mos_average_samples_pv", "$avp(mos_average_samples)")
modparam("rtpengine", "mos_average_pv", "$avp(mos_average)")
modparam("rtpengine", "mos_average_packetloss_pv", "$avp(mos_average_packetloss)")
modparam("rtpengine", "mos_average_jitter_pv", "$avp(mos_average_jitter)")
modparam("rtpengine", "mos_average_roundtrip_pv", "$avp(mos_average_roundtrip)")

modparam("path", "use_received", 1)

# ----------------- Settings for Dispatcher ---------------
modparam("dispatcher", "list_file", "/etc/kamailio_pcscf/dispatcher.list")

# Dispatcher: Enable Failover-Support
modparam("dispatcher", "flags", 2)
# Dispatcher: Overwrite Destination address, if required.
modparam("dispatcher", "force_dst", 1)
# AVP's required for Fail-Over-Support:
#modparam("dispatcher", "dst_avp", "$avp(DISPATCHER_DST_AVP)")
#modparam("dispatcher", "grp_avp", "$avp(DISPATCHER_GRP_AVP)")
#modparam("dispatcher", "cnt_avp", "$avp(DISPATCHER_CNT_AVP)")
#modparam("dispatcher", "sock_avp", "$avp(DISPATCHER_SOCK_AVP)")

# Try to recover disabled destinations every 15 seconds.
modparam("dispatcher", "ds_ping_interval", 15)
# Actively query the gateways:
modparam("dispatcher", "ds_probing_mode", 1)

# -- usrloc params --
#!ifdef DB_URL
#!ifdef DB_URL2
modparam("ims_usrloc_pcscf", "db_url", "cluster://cluster1")
#!else
modparam("ims_usrloc_pcscf", "db_url", DB_URL)
#!endif
modparam("ims_usrloc_pcscf", "db_mode", 1)
#!endif

#!ifdef WITH_NATPING

# Timner for NAT-Ping
#modparam("ims_usrloc_pcscf", "ping_timer_interval", 100000)
# Ping method: 0 = UDP-Ping, 1 = SIP-Options for TCP/TLS, UDP Ping for others, 2 = SIP-Options for all contacts.
#modparam("ims_usrloc_pcscf", "ping_method", 2)
# Ping protocols: 0 = UDP only, 1 = All devices
#modparam("ims_usrloc_pcscf", "ping_protocols", 1)
# SIP-Method for Ping
#modparam("ims_usrloc_pcscf", "ping_sip_method", "OPTIONS")
# Ping From User
#modparam("ims_usrloc_pcscf", "ping_from", PCSCF_URL)
# Optional Valid SIP-Replies:
#modparam("ims_usrloc_pcscf", "ping_reply_codes", "class=3;code=403")

#!else

# Timner for NAT-Ping
modparam("ims_usrloc_pcscf", "ping_timer_interval", 100000)

#!endif

modparam("ims_usrloc_pcscf", "hash_size", 14)
modparam("ims_usrloc_pcscf", "timer_interval", 21)
modparam("ims_usrloc_pcscf", "enable_debug_file", 0)
modparam("ims_usrloc_pcscf", "match_contact_host_port", 1)
modparam("ims_usrloc_pcscf", "expires_grace", 300)

modparam("ims_registrar_pcscf", "is_registered_fallback2ip", 2)
modparam("ims_registrar_pcscf", "ignore_reg_state", 1)
modparam("ims_registrar_pcscf", "ignore_contact_rxport_check", 1)

#!ifdef WITH_REGINFO
modparam("ims_registrar_pcscf", "subscribe_to_reginfo", 1)
#modparam("ims_registrar_pcscf", "subscription_expires",0)
modparam("ims_registrar_pcscf", "publish_reginfo", 1)
modparam("ims_registrar_pcscf", "pcscf_uri", PCSCF_URL)
#!else
modparam("ims_registrar_pcscf", "subscribe_to_reginfo", 0)
modparam("ims_registrar_pcscf", "publish_reginfo", 0)
#!endif

#!ifdef WITH_RX
# -- CDP params --
modparam("cdp","config_file","/etc/kamailio_pcscf/pcscf.xml")
modparam("cdp", "latency_threshold", 1500)
modparam("cdp", "workerq_latency_threshold", 300)
#modparam("cdp", "debug_heavy", 1)
# -- diameter_rx params --
modparam("ims_qos", "rx_dest_realm", "isbvpcrf001.zte.com")
modparam("ims_qos", "authorize_video_flow", 1)
modparam("ims_qos", "audio_default_bandwidth", 41)
modparam("ims_qos", "video_default_bandwidth", 700)
modparam("ims_qos", "terminate_dialog_on_rx_failure", 1)
modparam("ims_qos", "delete_contact_on_rx_failure", 1)
#modparam("ims_qos", "include_rtcp_fd", 0)
#modparam("ims_qos", "use_via_as_src", 1)
#!endif

# -- pua params --
#!ifdef WITH_REGINFO
#!ifdef DB_URL
#!ifdef DB_URL2
modparam("pua", "db_url", "cluster://cluster1")
#!else
modparam("pua", "db_url", DB_URL)
#!endif
#!endif
modparam("pua", "check_remote_contact", 0)
#!endif

# -- ims_dialog params --
modparam("ims_dialog", "dlg_flag", FLT_DIALOG)
modparam("ims_dialog", "timeout_avp", "$avp(DLG_TIMEOUT_AVP)")
modparam("ims_dialog", "detect_spirals", 0)
modparam("ims_dialog", "profiles_no_value", "orig ; term")
#!ifdef DB_URL
#!ifdef DB_URL2
modparam("ims_dialog", "db_url", "cluster://cluster1")
#!else
modparam("ims_dialog", "db_url", DB_URL)
#!endif
modparam("ims_dialog", "db_update_period", 120);
modparam("ims_dialog", "db_mode", 2)
#!else
modparam("ims_dialog", "db_mode", 0)
#!endif


#!ifdef CAPTURE_NODE
# Destination, where to send the traffic
modparam("siptrace", "duplicate_uri", CAPTURE_NODE)
# Trace all traffic
modparam("siptrace", "trace_on", 1)
modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "trace_flag", FLT_CAPTURE)
modparam("siptrace", "hep_mode_on", 1)
#!endif

# -- statistics params --
# Registration Time
modparam("statistics", "variable", "register_success")
modparam("statistics", "variable", "register_failed")
modparam("statistics", "variable", "register_time")

# NER/ASR/CST Calculation for MO
modparam("statistics", "variable", "mo_total")
modparam("statistics", "variable", "mo_ner")
modparam("statistics", "variable", "mo_success")
modparam("statistics", "variable", "mo_cst_ringing")
modparam("statistics", "variable", "mo_cst_time")

# NER/ASR/CST Calculation for MT
modparam("statistics", "variable", "mt_total")
modparam("statistics", "variable", "mt_ner")
modparam("statistics", "variable", "mt_success")
modparam("statistics", "variable", "mt_cst_ringing")
modparam("statistics", "variable", "mt_cst_time")

# QoS Statistics
modparam("statistics", "variable", "qos_total")
modparam("statistics", "variable", "qos_mos")
modparam("statistics", "variable", "qos_packetloss")
modparam("statistics", "variable", "qos_jitter")
modparam("statistics", "variable", "qos_rountrip")

#!ifdef WITH_TOPOS
# ----- topos params -----
loadmodule "topos"
#!ifdef DB_URL
modparam("topos", "storage", "db")
#!ifdef DB_URL2
modparam("topos", "db_url", "cluster://cluster1")
#!else
modparam("topos", "db_url", DB_URL)
#!endif
#!else
# ----- ndb_redis params -----
loadmodule "ndb_redis"
modparam("ndb_redis", "server", "name=srv8;addr=127.0.0.1;port=6379;db=8")

# ----- topos_redis params -----
loadmodule "topos_redis"
modparam("topos_redis", "serverid", "srv8")

# ----- topos params -----
modparam("topos", "storage", "redis")
#!endif

modparam("topos", "mask_callid", 1)
modparam("topos", "sanity_checks", 1)
#!endif

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")

# ----- jsonrpcs params -----
loadmodule "jsonrpcs.so"
modparam("jsonrpcs", "transport", 1)
#!endif

#modparam("ims_qos", "ims_service_avp", "ims")


/*
loadmodule "siptrace.so"
#Siptrace
modparam("siptrace", "duplicate_uri", "sip:10.161.224.214:9060")
modparam("siptrace", "hep_mode_on", 1)
modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "trace_flag", 22)
modparam("siptrace", "trace_on", 1)
modparam("siptrace", "trace_mode", 1)
*/

# Module AVPOPS for Conference Call
loadmodule "avpops"
modparam("avpops", "db_url", DB_URL)
modparam("avpops", "avp_table", "MT_CALL_TAGS")
modparam("avpops", "use_domain", 1)

# HTTP Client for Conference Call
#loadmodule "http_client"
#modparam("http_client", "connection_timeout", 4)
#modparam("http_client", "keep_connections", 1)
#modparam("http_client", "httpcon", "ConfServer=>http://conf-factory.ims.mnc006.mcc410.3gppnetwork.org:8000")
#modparam("http_client", "httpcon", "ConfServer=>http://10.161.224.216:8000")

####### Routing Logic ########

# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
route {
#!ifdef WITH_DEBUG
	xlog("$rm ($fu ($si:$sp) to $tu, $ci)\n");
#!endif
        xlog("L_INFO", "$rm ($fu ($si:$sp) to $tu, $ci)\n");

#!ifdef WITH_WEBSOCKET
	if (($Rp == MY_WS_PORT || $Rp == MY_WSS_PORT) && !(proto == WS || proto == WSS)) {
		xlog("L_WARN", "Websocket-request received on SIP/$Rp\n");
		sl_send_reply("403", "Forbidden - Websocket-request received on SIP/$Rp");
		exit;
	}
#!endif
	xlog("L_INFO", "[$tU $fU $ci $rm] First Request received from $si from $ua \n");


	 #Maab adding this code here to change the value of refer-to variabler

	if(is_method("NOTIFY") && $si=="10.161.224.90") {
                xlog("L_INFO", "[$tU $fU $ci $rm] Calling Sleep funtion for 1 seconds for Method NOTIFY \n");
		sleep(1);
	}

        if(is_method("INVITE") && $si=="10.161.224.234" && $tU=="mmtel" )  {
                xlog("L_INFO", "[$tU $fU $ci $rm] Adding Target-Dialog in Method INVITE \n");
		#avp_db_query("SELECT refer_to FROM MT_CALL_TAGS where to_number='+923454727238' order by id desc limit 1", "$avp(target-dialog)");
		#append_hf("Target-Dialog: $avp(target-dialog)\r\n");
		append_hf("Target-Dialog: testCallID-20200908;to-tag=test2Tag;from-tag=testFromTag\r\n");
		append_hf("addReplaces: 0\r\n");
	}

	#Claning Referred-By URI
        if(is_method("REFER") && $si=="10.161.224.234") {
		#$var(to_number)=$(hdr(Refer-To){s.substr,5,13});
                #xlog("L_INFO", "[$tU $fU $ci $rm] Refer-To: $hdr(Refer-To) \n");
                #xlog("L_INFO", "[$tU $fU $ci $rm] Refer-To (Sub): $(hdr(Refer-To){s.substr,5,3})  \n");
		if( $(hdr(Refer-To){s.substr,5,3}) == '+92') {
			$var(to_number)=$(hdr(Refer-To){s.substr,5,13});
		} else {
			$var(to_number)="+92"+$(hdr(Refer-To){s.substr,6,11});
		}
                xlog("L_INFO", "[$tU $fU $ci $rm] Cleaning Refer-To: $var(to_number) and Referred-By URI: $hdr(Referred-By) \n");
                $var(referredByUri)="sip:"+$(hdr(Referred-By){s.substr,5,13})+"@conf-factory.ims.mnc006.mcc410.3gppnetwork.org";
		avp_db_query("SELECT refer_to FROM MT_CALL_TAGS where to_number='$var(to_number)' order by id desc limit 1", "$avp(target-dialog)");
                #$var(referUri)="sip"+$(hdr(Refer-To){s.substr,4,14})+"@ims.mnc006.mcc410.3gppnetwork.org";
                $var(refer-to)="sip:"+$var(to_number)+"@ims.mnc006.mcc410.3gppnetwork.org";
                #xlog("L_INFO", "[$tU $fU $ci $rm] New Refer URI is $var(referUri) \n");
                #$ru="sip"+$(hdr(Refer-To){s.substr,4,14})+"@ims.mnc006.mcc410.3gppnetwork.org";
                #remove_hf("To");
		#append_hf("To: $var(referUri)\r\n");
		#append_hf("Refer-To: <mmtel@conf-factory.ims.mnc006.mcc410.3gppnetwork.org>\r\n");
                remove_hf("Refer-To");
		append_hf("Refer-To: <$var(refer-to)>\r\n");
		append_hf("Target-Dialog: $avp(target-dialog)\r\n");
                remove_hf("Referred-By");
                append_hf("Referred-By: <$var(referredByUri)>\r\n");
		#$var(http_request)= "{\"Refer-To\":\"" + $var(refer-to) + "\",\n\"Target-Dialog\":\"" +$avp(target-dialog) +"\",\n\"Referred-By\":\"" + $var(referredByUri) +"\",\n\"Replaces\":1}";
		# POST Request
		#$var(res) = http_connect("ConfServer", "/api/dial", "application/json", "$var(http_request)", "$avp(gurka)");
		#xlog("L_INFO", "[$tU $fU $ci $rm] ConfServer HTTP connection for $var(to_number): $avp(gurka) Result code $var(res)\n");	
        }

	if(is_method("INVITE") && $fd=="conf-factory.ims.mnc006.mcc410.3gppnetwork.org") {
                xlog("L_INFO", "[$tU $fU $ci $rm] INVITE coming from CONFSERVER \n");
		avp_db_query("SELECT refer_to FROM MT_CALL_TAGS where to_number='$tU' order by id desc limit 1", "$avp(target-dialog)");
		append_hf("Replaces: $avp(target-dialog)\r\n");
                xlog("L_INFO", "[$tU $fU $ci $rm] Replaces Header adder in INVITE from CONFSERVER \n");
	}

	# per request initial checks
	route(REQINIT);

	# Diableing Subscribe and PUBLISH
	if (is_method("SUBSCRIBE|PUBLISH|MESSAGE")) {
		#xlog("L_INFO", "[$tU $fU $ci $rm] Not Implemneted - Temporarily Disabled \n");
		sl_send_reply("501","Not Implemented - Temporarily Disabled");
		exit;
	}
/*
	# Disableing Short Codes which Require CS Fall Back
        if ( $tU == '1122' || $tU =='15' || $tU == '115' || $tU =='16' ) {
                xlog("[$tU $fU $ci $rm] Calling Short code $tU is not allowed\n");
                #t_reply("405","Method Not Allowed");
                sl_send_reply("405","Method Not Allowd");
                exit;
        }
*/
	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			t_relay();
		}
		exit;
	}


	if (is_method("NOTIFY") && (uri==myself)) {
		route(NOTIFY);
		exit;
	}

	#Handle REFER
	#if (is_method("REFER") && (uri==myself)) {
	#if (has_totag() && $rm=="REFER") {
         #       xlog("[$tU $fU $ci $rm] Releying $rm to S-CSCF\n");
		#if(is_present_hf("Refer-To")) {
		#	$sht($fU=>Header)=$hdr(Refer-To);
		#} else {
		#	append_hf("Refer-To: $sht($fU=Header)\r\n");
		#}
		#remove_hf("Route");
		#rewritehost("10.161.224.75");
		#rewriteport("5060");
		#append_hf("Route:<sip:mo@10.161.224.90:6060>\r\n");
         #       route(RELAY);
         #       exit;
        #}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	# handle retransmissions
	if(t_precheck_trans()) {
		t_check_trans();
		exit;
	}

	# Check for Re-Transmissions
	t_check_trans();

	if (is_method("UPDATE")) {
		send_reply("403","Forbidden - Target refresh outside dialog not allowed");
		break;
	}
	if (is_method("BYE|PRACK")) {
		send_reply("403","Forbidden - Originating subsequent requests outside dialog not allowed");
		break;
	}

	if (is_method("INVITE")) {
		setflag(FLT_DIALOG);
	}

	if (is_method("REGISTER")) {
		xlog("L_INFO", "[$tU $fU $ci $rm] Hanlding REGISTER Request \n");
		route(REGISTER);
		return;
	}

 

	loose_route();
	$var(continue) = 1;

	#xlog("L_INFO", "[$tU $fU $ci $rm] Before FROM_SBC \n");
	route_if_exists("FROM_SBC");

	if ($var(continue) == 1) {
		if ($route_uri =~ "sip:term@.*") {
			if (!route_if_exists("SBC_MT")) {
				# prepend mt as user for record route
				$avp(RR_CUSTOM_USER_AVP)="mt";
				#xlog("L_INFO", "[$tU $fU $ci $rm] Calling Route MT \n");
				route(MT);
			}
		} else {
			if (!route_if_exists("SBC_MO")) {
				#xlog("L_INFO", "[$tU $fU $ci $rm] Calling Route MO \n");
				route(MO);
			}
		}
	}
	

	if (is_method("INVITE|SUBSCRIBE")) {
		# record routing for dialog forming requests (in case they are routed)
		record_route();
	}

	# Forward request:
	#xlog("L_INFO", "[$tU $fU $ci $rm] Relaying Request to $route_uri\n");
	route(RELAY);
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	# Reply to OPTIONS:
	if (is_method("OPTIONS") && (uri==myself)) {
		options_reply();
		exit;
	}

	$var(used) = 1 - ($stat(free_size) / $stat(total_size));
	xlog("L_DBG", "Mem: Total $stat(total_size), Free $stat(free_size) [$var(used)% used]\n");
	if ($var(used) > 95) {
		send_reply("503", "Server overloaded");
		exit;
	}

	# Trace this message
#!ifdef CAPTURE_NODE
	sip_trace();
	setflag(FLT_CAPTURE);
#!endif

#!ifdef WITH_ANTIFLOOD
#!ifndef LOADTEST
	# flood dection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if (!has_totag() && (src_ip!=myself) && !ds_is_from_list("-1", "3"))
	{
		if($sht(ipban=>$si)!=$null)
		{
			# ip is already blocked
			xlog("L_ALERT", "request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			xlog("Blocking traffic from $si\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp, $ua)\n");
			xlog("Blocking traffic from $si\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif
        if ((uri == myself) && is_method("INVITE|REGISTER")) {
                xlog("L_ALERT","ALERT: Request to myself: $ru from $fu (IP:$si:$sp, $ua), Blocking\n");
		xlog("Blocking traffic from $si\n");
                $sht(ipban=>$si) = 1;
                exit;
        }
#!endif

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}

	# Check for shutdown mode:
	if (!has_totag() && ($sel(cfg_get.system.shutdownmode) > 0)) {
		send_reply("503", "Server shutting down");
		exit;
	}

#!ifdef WITH_RX_CHECKAVAIL
	# Check for Cx/Dx Connection:
	if(!cdp_has_app("16777236")) {
		send_reply("503", "Rx Interface not ready");
		exit;
	}
#!endif

	# Ignore Re-Transmits:
	if (!is_method("CANCEL|ACK|NOTIFY") && t_lookup_request()) {
		xlog("Re-Transmit: $rm ($fu ($si:$sp) to $tu, $ci)\n");
		t_retransmit_reply();
		exit;
	}

	if (is_method("INVITE|REGISTER")) {
		#xlog("L_INFO", "[$tU $fU $ci $rm] 100 Trying for $ru\n");
		send_reply("100", "Trying");
	}
}

route[RELAY] {
	
	xlog("L_INFO", "[$tU $fU $ci $rm] Relaying Request to $ru \n");
	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
#!ifdef WITH_SBC
			if(!isdsturiset()) {
				handle_ruri_alias();
			}
#!endif
			if ($route_uri =~ "sip:mt@.*") {
				if (is_direction("upstream") && check_route_param("rm=")) {
					# Strip Transport from RURI:				
					$ru = $(ru{re.subst,/;transport=[A-Za-z]*//g});
					xlog("L_INFO", "[$tU $fU $ci $rm] MT Request Received \n");
					route(MT_indialog);
				}
#!ifndef WITH_SBC
				if (is_direction("downstream")) {
					if(!isdsturiset()) {
						handle_ruri_alias();
					}
				}
#!endif
				
			} else if ($route_uri =~ "sip:mo@.*") {
				if (is_direction("downstream") && check_route_param("rm=")) {
					# Strip Transport from RURI:
					$ru = $(ru{re.subst,/;transport=[A-Za-z]*//g});
					xlog("L_INFO", "[$tU $fU $ci $rm] MO Request Received \n");
					route(MO_indialog);
				}
#!ifndef WITH_SBC
				if (is_direction("upstream")) {
					if(!isdsturiset()) {
						handle_ruri_alias();
					}
				}
#!endif
			}

			# Handle NAT
			route(NATMANAGE);
			route(RELAY);
		} else {
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Notify Route:                                                     #
#####################################################################
route[NOTIFY]
{
	xlog("L_DBG", "IMS: INSIDE NOTIFY\n");
	if (reginfo_handle_notify("location")) {
		send_reply("200","OK - P-CSCF processed notification");
		break;
	} else {
		t_reply("500","Error encountered while processing notification");
		break;
	}
}

event_route[tcp:closed] {
	if ($sht(tcptls=>$conid) != $null) {
		pcscf_unregister("location", "$sht(tcptls=>$conid)", "$(sht(tcptls_src=>$conid){uri.host})", "$(sht(tcptls_src=>$conid){uri.port})");
		$sht(tcptls=>$conid) = $null;
		$sht(tcptls_src=>$conid) = $null;
	}
}

event_route[tcp:timeout] {
	if ($sht(tcptls=>$conid) != $null) {
		pcscf_unregister("location", "$sht(tcptls=>$conid)", "$(sht(tcptls_src=>$conid){uri.host})", "$(sht(tcptls_src=>$conid){uri.port})");
		$sht(tcptls=>$conid) = $null;
		$sht(tcptls_src=>$conid) = $null;
	}
}

event_route[tcp:reset] {
	if ($sht(tcptls=>$conid) != $null) {
		pcscf_unregister("location", "$sht(tcptls=>$conid)", "$(sht(tcptls_src=>$conid){uri.host})", "$(sht(tcptls_src=>$conid){uri.port})");
		$sht(tcptls=>$conid) = $null;
		$sht(tcptls_src=>$conid) = $null;
	}
}

event_route[htable:expired:natping] {
    xlog("L_DBG", "natping record expired $shtrecord(key) => $shtrecord(value)\n");
}

event_route[htable:mod-init] {
	xlog("L_DBG", "event_route[htable:mod-init] {\n");
}

#!ifdef WITH_XMLRPC
include_file "route/xmlrpc.cfg"
#!endif
#!ifdef WITH_WEBSOCKET
include_file "route/websocket.cfg"
#!endif
#!ifdef WITH_MSRP
include_file "route/msrp.cfg"
#!endif
include_file "route/register.cfg"
include_file "route/rtp.cfg"
include_file "route/mo.cfg"
include_file "route/mt.cfg"
#!ifdef WITH_SBC
include_file "route/sbc.cfg"
#!endif
#!ifdef WITH_X2
include_file "route/x2.cfg"
#!endif
import_file "mo_custom.cfg"
import_file "mt_custom.cfg"
import_file "register_custom.cfg"
